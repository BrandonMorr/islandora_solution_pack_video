<?php

/**
 * @file
 * Luke's magic video load test.
 */

class IslandoraVideoDerivativesIngestTestCase extends IslandoraCollectionWebTestCase {

  /**
   * Get test information.
   *
   * @see IslandoraWebTestCase::getInfo()
   */
  public static function getInfo() {
    return array(
      'name' => 'Video Load Test',
      'description' => 'Ingests and purges ten videos, creates derivatives for them, and attempts to assert their datastreams.',
      'group' => 'Islandora Video',
    );
  }

  /**
   * Set up the test environment.
   *
   * @see IslandoraWebTestCase::setUp()
   */
  public function setUp() {
    parent::setUp(array(
      'islandora',
      'islandora_video',
      'islandora_basic_collection',
    ));
  }

  /**
   * Creates an administrative user and attempts to ingest a video file.
   */
  public function testIngestPurgeVideoDerivatives() {

    // Sets up the testing space.
    $user = $this->drupalCreateUser(array(
      'view fedora repository objects',
      'ingest fedora objects',
      'administer site configuration',
      'manage object properties',
      'delete fedora objects and datastreams',
      'create child collection',
    ));
    $this->drupalLogin($user);

    $label = $this->randomName(16);
    $suffix = $this->randomName(16);
    $collectionpid = 'islandora:' . $suffix;
    $this->createTestCollection($label, 'islandora:sp_videoCModel', $collectionpid);

    // Ensures derivative creation is turned on.
    $edit = array(
      'islandora_video_retain_original' => TRUE,
      'islandora_video_make_archive' => TRUE,
      'islandora_video_make_mp4_locally' => TRUE,
      'islandora_video_make_ogg_locally' => TRUE,
      'islandora_video_make_thumbnail_locally' => TRUE,
    );
    $this->drupalPost('admin/islandora/video', $edit, 'Save configuration');

    // Attempts to create an object.
    for ($i = 1; $i <= 10; $i++) {
      $path = 'islandora/object/' . $collectionpid . '/manage/overview/ingest';
      $edit = array();
      $file = drupal_get_path('module', 'islandora_video') . '/tests/fixtures/test_' . $i . '.avi';
      $handle = fopen($file, 'r');
      $contents = fread($handle, filesize($file));
      fclose($handle);
      $edit['files[file]'] = $file;
      $this->drupalPost($path, $edit, t('Ingest'));
      $this->assertText('New Object', 'Video object was created', 'Islandora');

      // Determines whether or not the appropriate datastreams were created.
      $object = $this->getObjectFromPath($this->url);
      $datastreams = array(
        'RELS-EXT',
        'DC',
        'OBJ',
        'MP4',
        'OGG',
        'MKV',
        'TN',
      );
      $this->assertDatastreams($object, $datastreams);

      // Checks if the OBJ datastream is valid.
      if (isset($object['OBJ'])) {
        $avi = $object['OBJ']->content;
        $this->assertTrue($avi = $contents, 'OBJ datastream matches binary of originally ingested object', 'Islandora');
      }

      // Checks if the MP4 datastream is valid.
      if (isset($object['MP4'])) {
        $mp4 = $object['MP4']->content;
        if (strpos($mp4, 'ftyp')) {
          $mp4_ftyp = substr(strpos($mp4, 'ftyp'), 4, 4);
          $this->pass("MP4 datastream asserts that it is a valid ISO-formatted video file using ftyp {$mp4_ftyp}", 'Islandora');
        }
        else {
          $this->fail("MP4 datastream is not a valid ISO-formatted video", 'Islandora');
        }
      }

      // Checks if the OGG datastream is valid.
      if (isset($object['OGG'])) {
        $ogg = $object['OGG']->content;
        $ogg_pages = substr_count($ogg, 'OggS');
        $this->assertTrue(substr_count($ogg, 'OggS'), "OGG datastream asserts that it contains {$ogg_pages} Ogg pages (even a very small file should contain several)", 'Islandora');
        $this->assertTrue(substr_count($ogg, 'theora'), 'OGG datastream asserts that it contains Theora-encoded video data', 'Islandora');
        $this->assertTrue(substr_count($ogg, 'vorbis'), 'OGG datastream asserts that it contains Vorbis-encoded audio data', 'Islandora');
      }

      // Checks if the MKV datastream is valid.
      if (isset($object['MKV'])) {
        $mkv = bin2hex($object['MKV']->content);
        $this->assertTrue(substr($mkv, 0, 8) == '1a45dfa3', 'MKV datastream asserts that it is an EBML-formatted file', 'Islandora');
        $this->assertTrue(substr_count($mkv, '6d6174726f736b61') == 1, 'MKV datastream asserts that its EBML DocType is Matroska', 'Islandora');
      }
    }

    // Attempts to delete the collection, removing all objects in batch.
    $this->deleteTestCollection($collectionpid);
  }
}
